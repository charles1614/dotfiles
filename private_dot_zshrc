# =============================================================================
# Zsh Configuration File (.zshrc)
#
# This file is loaded for interactive Zsh sessions.
# It sets up the shell environment, loads plugins, and defines personalizations.
# =============================================================================

# =============================================================================
# 01. ENVIRONMENT & PATHS
# =============================================================================
# Set and export environment variables and modify the PATH here.

# -- Google Cloud SDK --
export GOOGLE_CLOUD_PROJECT="civil-charmer-441203-i9"

# -- ASDF Version Manager --
# ASDF needs its data directory defined and its shims/binaries in the PATH.
if [[ "$(uname)" == "Linux" ]]; then
  # Linux setup
  export ASDF_DATA_DIR="$HOME/.asdf"
  export PATH="$ASDF_DATA_DIR/bin:$ASDF_DATA_DIR/shims:$PATH"
elif [[ "$(uname)" == "Darwin" ]]; then
  # macOS (via Homebrew) setup
  # The asdf.sh script handles PATH and completions.
  if [ -f "$(brew --prefix asdf)/libexec/asdf.sh" ]; then
    source "$(brew --prefix asdf)/libexec/asdf.sh"
  fi
fi

# =============================================================================
# 02. ZINIT PLUGIN MANAGER
# =============================================================================
# This section installs and initializes the Zinit plugin manager.

# -- Powerlevel10k Instant Prompt --
# This must be sourced before Zinit to enable a fast shell startup.
if [[ -r "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh" ]]; then
  source "${XDG_CACHE_HOME:-$HOME/.cache}/p10k-instant-prompt-${(%):-%n}.zsh"
fi

# -- Zinit Installation --
# Ensures Zinit is installed if it's missing.
if [[ ! -f $HOME/.local/share/zinit/zinit.git/zinit.zsh ]]; then
    print -P "%F{33} %F{220}Installing Zinit Plugin Manager...%f"
    command mkdir -p "$HOME/.local/share/zinit" && command chmod g-rwX "$HOME/.local/share/zinit"
    command git clone https://github.com/zdharma-continuum/zinit "$HOME/.local/share/zinit/zinit.git" && \
        print -P "%F{34}Installation successful.%f%b" || \
        print -P "%F{160}The clone has failed.%f%b"
fi

# -- Zinit Initialization --
source "$HOME/.local/share/zinit/zinit.git/zinit.zsh"
autoload -Uz _zinit
(( ${+_comps} )) && _comps[zinit]=_zinit

# =============================================================================
# 03. ZINIT PLUGINS & THEME
# =============================================================================
# All plugins and the theme are loaded here using Zinit.

# -- Zinit Annexes (for extended functionality) --
zinit light-mode for \
    zdharma-continuum/zinit-annex-as-monitor \
    zdharma-continuum/zinit-annex-bin-gem-node \
    zdharma-continuum/zinit-annex-patch-dl \
    zdharma-continuum/zinit-annex-rust

# -- Core Shell Functionality --
zinit light zdharma-continuum/fast-syntax-highlighting        # Syntax highlighting
zinit light zsh-users/zsh-autosuggestions                     # Command auto-suggestions
zinit light zdharma-continuum/history-search-multi-word     # Multi-word history search
zinit light zsh-users/zsh-history-substring-search            # Enables history search with arrow keys

# -- Completions --
# Loads zsh-completions and initializes the completion system afterwards.
zinit ice atload'
    # Only initialize completions in an INTERACTIVE shell.
    # This check prevents errors during non-interactive builds (e.g., Docker).
    if [[ "$-" == *i* ]]; then
        autoload -U compinit && compinit
        setopt complete_aliases
    fi
'
zinit light zsh-users/zsh-completions

# -- Utility & Framework Plugins (from Oh My Zsh) --
zinit snippet OMZ::plugins/git/git.plugin.zsh         # Git aliases and functions
zinit snippet OMZ::plugins/asdf/asdf.plugin.zsh       # Completions for asdf
zinit snippet OMZ::plugins/sudo/sudo.plugin.zsh       # Adds 'Esc Esc' shortcut to prepend sudo

# -- Theme --
zinit ice depth"1"
zinit light romkatv/powerlevel10k

# =============================================================================
# 04. ALIASES & FUNCTIONS
# =============================================================================
# Custom aliases and functions for a more efficient workflow.

# -- Editor Aliases --
alias vi="nvim"
alias vim="nvim"
alias view="nvim -R"
alias vimdiff="nvim -d"

# -- 'ls' replacement with 'eza' --
alias ls='eza --icons'            # ls with icons
alias ll='eza -l --git --icons'   # long format, with git status and icons
alias l='eza -l --git --icons'    # same as ll
alias la='eza -la --icons'        # show all files (including hidden) with icons
alias tree='eza --tree --icons'   # directory tree view with icons

# -- terminal multipler --
# Zellij Aliases (using "zj")
alias zj='zellij'
alias zjs='zellij -s'
alias zja='zellij attach'
alias zjl='zellij ls'
alias zjk='zellij kill-all-sessions'

# =============================================================================
# 05. KEYBINDINGS
# =============================================================================
# Binds arrow keys to zsh-history-substring-search.
# Uses terminfo for better compatibility across different terminals.

zmodload zsh/terminfo
bindkey "${terminfo[kcuu1]}" history-substring-search-up   # Bind Up Arrow
bindkey "${terminfo[kcud1]}" history-substring-search-down # Bind Down Arrow
bindkey '^[[A' history-substring-search-up
bindkey '^[OA' history-substring-search-up
bindkey '^[[B' history-substring-search-down
bindkey '^[OB' history-substring-search-down

# =============================================================================
# 06. CUSTOM SCRIPTS
# =============================================================================
# Source any personal scripts from a dedicated functions directory.

# -- Load uv workflow extensions --
if [[ -f "$HOME/.config/zsh/functions/uv_workflow.zsh" ]]; then
    source "$HOME/.config/zsh/functions/uv_workflow.zsh"
fi

# You can add more custom scripts here in the future.
# source "$HOME/.config/zsh/functions/another_script.zsh"

# =============================================================================
# 07. FINAL CONFIGURATIONS & INITIALIZATIONS
# =============================================================================
# Core shell settings and tool initializations that should run at the end.

# -- Shell History Configuration --
# Placed here to ensure it overrides any settings from plugins.
HISTFILE=~/.zsh_history      # Location of the history file.
HISTSIZE=10000               # Number of lines of history to keep in memory.
SAVEHIST=10000               # Number of lines of history to save to the history file.
setopt HIST_IGNORE_DUPS      # Don't record an event if it's a duplicate of the previous one.
setopt HIST_REDUCE_BLANKS    # Remove superfluous blanks from history entries.
setopt INC_APPEND_HISTORY    # Append commands to the history file immediately.
setopt SHARE_HISTORY         # Share history between all active shell sessions.
setopt EXTENDED_HISTORY      # Save command timestamps and duration to history.

# -- Powerlevel10k Configuration File --
# Sources your personal Powerlevel10k settings.
# To reconfigure, run `p10k configure`.
[[ ! -f ~/.p10k.zsh ]] || source ~/.p10k.zsh

# -- The Fuck (command corrector) --
if command -v thefuck >/dev/null 2>&1; then
    eval "$(thefuck --alias please)"
fi

# -- Zoxide (smarter cd command) --
if command -v zoxide >/dev/null 2>&1; then
    eval "$(zoxide init zsh)"
fi

# -- Direnv (automatic environment loader) --
if command -v direnv >/dev/null 2>&1; then
  eval "$(direnv hook zsh)"
fi
